// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`actions.source.fetch Throw an error if fetch fails 1`] = `
Object {
  "/some/route/": Object {
    "isFetching": true,
    "isReady": false,
    "link": "/some/route/",
    "page": 1,
    "query": Object {},
    "route": "/some/route/",
  },
}
`;

exports[`actions.source.fetch does nothing if data exists 1`] = `
Object {
  "/some/route/": Object {
    "id": 1,
    "isFetching": false,
    "isPostType": true,
    "isReady": true,
    "link": "/some/route/",
    "page": 1,
    "query": Object {},
    "route": "/some/route/",
    "type": "example",
  },
}
`;

exports[`actions.source.fetch should run again when \`force\` is used 1`] = `
Object {
  "/some/route/": Object {
    "id": 1,
    "isFetching": false,
    "isPostType": true,
    "isReady": true,
    "link": "/some/route/",
    "page": 1,
    "query": Object {},
    "route": "/some/route/",
    "type": "example",
  },
}
`;

exports[`actions.source.fetch should work if data doesn't exist 1`] = `
Object {
  "/some/route/": Object {
    "id": 1,
    "isFetching": false,
    "isPostType": true,
    "isReady": true,
    "link": "/some/route/",
    "page": 1,
    "query": Object {},
    "route": "/some/route/",
    "type": "example",
  },
}
`;

exports[`actions.source.init Errors for state.data['/some/route/'] should be removed when fetching with { force: true } 1`] = `
Object {
  "id": 1,
  "isFetching": false,
  "isPostType": true,
  "isReady": true,
  "link": "/some/route/",
  "page": 1,
  "query": Object {},
  "route": "/some/route/",
  "type": "example",
}
`;

exports[`actions.source.init should add new handlers from postTypes array 1`] = `
Array [
  Object {
    "func": [MockFunction],
    "name": "always",
    "pattern": "/(.*)",
    "priority": 0,
  },
  Object {
    "func": [MockFunction],
    "name": "post with query permalink",
    "pattern": "RegExp:(\\\\?|&)p=\\\\d+",
    "priority": 10,
  },
  Object {
    "func": [MockFunction],
    "name": "page with query permalink",
    "pattern": "RegExp:(\\\\?|&)page_id=\\\\d+",
    "priority": 10,
  },
  Object {
    "func": [MockFunction],
    "name": "post archive",
    "pattern": "/",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "category",
    "pattern": "/category/(.*)?/:slug",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "tag",
    "pattern": "/tag/:slug",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "author",
    "pattern": "/author/:slug",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "date",
    "pattern": "/:year(\\\\d+)/:month(\\\\d+)?/:day(\\\\d+)?",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "attachment from post by day",
    "pattern": "/:year(\\\\d+)/:month(\\\\d+)/:day(\\\\d+)?/:postSlug(.*\\\\D.*)/:slug",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "post by id",
    "pattern": "/archives/:id(\\\\d+)",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "attachment from post by id",
    "pattern": "/archives/:postId(\\\\d+)/:slug",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "post type",
    "pattern": "/(.*)?/:slug",
    "priority": 30,
  },
  Object {
    "func": [MockFunction],
    "name": "cpt1",
    "pattern": "/cpt1/(.*)?/:slug/",
    "priority": 10,
  },
  Object {
    "func": [MockFunction],
    "name": "cpt1 with query permalink",
    "pattern": "RegExp:(\\\\?|&)p=\\\\d+&post_type=cpt1",
    "priority": 9,
  },
  Object {
    "func": [MockFunction],
    "name": "cpt2",
    "pattern": "/cpt2/(.*)?/:slug/",
    "priority": 10,
  },
  Object {
    "func": [MockFunction],
    "name": "cpt2 with query permalink",
    "pattern": "RegExp:(\\\\?|&)p=\\\\d+&post_type=cpt2",
    "priority": 9,
  },
  Object {
    "func": [MockFunction],
    "name": "cpt2 archive",
    "pattern": "/cpt2-archive/",
    "priority": 10,
  },
]
`;

exports[`actions.source.init should add new handlers from postTypes array 2`] = `
Array [
  Array [
    Object {
      "endpoints": Array [
        "cpts1",
      ],
    },
  ],
  Array [
    Object {
      "endpoints": Array [
        "cpts2",
      ],
    },
  ],
]
`;

exports[`actions.source.init should add new handlers from postTypes array 3`] = `
Array [
  Array [
    Object {
      "endpoint": "cpts2",
      "type": "cpt2",
    },
  ],
]
`;

exports[`actions.source.init should add new handlers from postTypes array 4`] = `
Array [
  Array [
    Object {
      "endpoint": "cpts1",
      "type": "cpt1",
    },
  ],
  Array [
    Object {
      "endpoint": "cpts2",
      "type": "cpt2",
    },
  ],
]
`;

exports[`actions.source.init should add new handlers from taxonomies array 1`] = `
Array [
  Object {
    "func": [MockFunction],
    "name": "always",
    "pattern": "/(.*)",
    "priority": 0,
  },
  Object {
    "func": [MockFunction],
    "name": "post with query permalink",
    "pattern": "RegExp:(\\\\?|&)p=\\\\d+",
    "priority": 10,
  },
  Object {
    "func": [MockFunction],
    "name": "page with query permalink",
    "pattern": "RegExp:(\\\\?|&)page_id=\\\\d+",
    "priority": 10,
  },
  Object {
    "func": [MockFunction],
    "name": "post archive",
    "pattern": "/",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "category",
    "pattern": "/category/(.*)?/:slug",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "tag",
    "pattern": "/tag/:slug",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "author",
    "pattern": "/author/:slug",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "date",
    "pattern": "/:year(\\\\d+)/:month(\\\\d+)?/:day(\\\\d+)?",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "attachment from post by day",
    "pattern": "/:year(\\\\d+)/:month(\\\\d+)/:day(\\\\d+)?/:postSlug(.*\\\\D.*)/:slug",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "post by id",
    "pattern": "/archives/:id(\\\\d+)",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "attachment from post by id",
    "pattern": "/archives/:postId(\\\\d+)/:slug",
    "priority": 20,
  },
  Object {
    "func": [MockFunction],
    "name": "post type",
    "pattern": "/(.*)?/:slug",
    "priority": 30,
  },
  Object {
    "func": [MockFunction],
    "name": "taxonomy1",
    "pattern": "/taxonomy1/(.*)?/:slug/",
    "priority": 10,
  },
  Object {
    "func": [MockFunction],
    "name": "taxonomy2",
    "pattern": "/taxonomy2/(.*)?/:slug/",
    "priority": 10,
  },
  Object {
    "func": [MockFunction],
    "name": "taxonomy3",
    "pattern": "/taxonomy3/(.*)?/:slug/",
    "priority": 10,
  },
]
`;

exports[`actions.source.init should add new handlers from taxonomies array 2`] = `
Array [
  Array [
    Object {
      "endpoint": "taxonomies1",
      "params": undefined,
      "postTypeEndpoint": undefined,
      "taxonomy": "taxonomy1",
    },
  ],
  Array [
    Object {
      "endpoint": "taxonomies2",
      "params": undefined,
      "postTypeEndpoint": "cpt",
      "taxonomy": "taxonomy2",
    },
  ],
  Array [
    Object {
      "endpoint": "taxonomies3",
      "params": Object {
        "type": Array [
          "posts",
          "cpts",
        ],
      },
      "postTypeEndpoint": "multiple-post-type",
      "taxonomy": "taxonomy3",
    },
  ],
]
`;

exports[`actions.source.init should add redirect for categories if 'categoryBase' is set 1`] = `
Array [
  Object {
    "func": [Function],
    "name": "category base",
    "pattern": "/wp-cat/:subpath+/",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "category base (reverse)",
    "pattern": "/category/(.*)/",
    "priority": 10,
  },
]
`;

exports[`actions.source.init should add redirect for tags if 'authorBase' is set 1`] = `
Array [
  Object {
    "func": [Function],
    "name": "author base",
    "pattern": "/blog/author/:subpath+/",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "author base (reverse)",
    "pattern": "/author/(.*)/",
    "priority": 10,
  },
]
`;

exports[`actions.source.init should add redirect for tags if 'tagBase' is set 1`] = `
Array [
  Object {
    "func": [Function],
    "name": "tag base",
    "pattern": "/wp-tag/:subpath+/",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "tag base (reverse)",
    "pattern": "/tag/(.*)/",
    "priority": 10,
  },
]
`;

exports[`actions.source.init should add redirect for the specified homepage 1`] = `
Array [
  Object {
    "func": [Function],
    "name": "homepage",
    "pattern": "RegExp:^/($|#|\\\\?(?!([^&#]+&)*s=))",
    "priority": 10,
  },
]
`;

exports[`actions.source.init should add redirect for the specified homepage and subdirectory 1`] = `
Array [
  Object {
    "func": [Function],
    "name": "homepage",
    "pattern": "RegExp:^/subdir/($|#|\\\\?(?!([^&#]+&)*s=))",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "subdirectory",
    "pattern": "/subdir/:subpath*/",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "subdirectory (reverse)",
    "pattern": "/(.*)",
    "priority": 10,
  },
]
`;

exports[`actions.source.init should add redirect for the specified posts page 1`] = `
Array [
  Object {
    "func": [Function],
    "name": "posts page",
    "pattern": "/all-posts/",
    "priority": 10,
  },
]
`;

exports[`actions.source.init should add redirect if 'subirectory' is present 1`] = `
Array [
  Object {
    "func": [Function],
    "name": "homepage",
    "pattern": "RegExp:^/blog/($|#|\\\\?(?!([^&#]+&)*s=))",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "posts page",
    "pattern": "/blog/all-posts/",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "category base",
    "pattern": "/blog/wp-cat/:subpath+/",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "category base (reverse)",
    "pattern": "/blog/category/(.*)/",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "tag base",
    "pattern": "/blog/wp-tag/:subpath+/",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "tag base (reverse)",
    "pattern": "/blog/tag/(.*)/",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "subdirectory",
    "pattern": "/blog/:subpath*/",
    "priority": 10,
  },
  Object {
    "func": [Function],
    "name": "subdirectory (reverse)",
    "pattern": "/(.*)",
    "priority": 10,
  },
]
`;

exports[`actions.source.init state.data['/some/route/'].isCategory should be removed when fetching with { force: true } 1`] = `
Object {
  "id": 7,
  "isArchive": true,
  "isCategory": true,
  "isFetching": false,
  "isReady": true,
  "isTerm": true,
  "items": Array [],
  "link": "/some/route/",
  "page": 1,
  "query": Object {},
  "route": "/some/route/",
  "taxonomy": "category",
}
`;
