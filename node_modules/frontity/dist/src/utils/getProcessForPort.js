"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const child_process_1 = require("child_process");
const path_1 = __importDefault(require("path"));
const execOptions = {
    encoding: "utf8",
    stdio: [
        "pipe",
        "pipe",
        "ignore", //stderr
    ],
};
function isProcessAReactApp(processCommand) {
    return /^node .*react-scripts\/scripts\/start\.js\s?$/.test(processCommand);
}
function getProcessIdOnPort(port) {
    return (0, child_process_1.execSync)("lsof -i:" + port + " -P -t -sTCP:LISTEN", execOptions)
        .split("\n")[0]
        .trim();
}
function getPackageNameInDirectory(directory) {
    const packagePath = path_1.default.join(directory.trim(), "package.json");
    try {
        return require(packagePath).name;
    }
    catch (e) {
        return null;
    }
}
function getProcessCommand(processId, processDirectory) {
    let command = (0, child_process_1.execSync)("ps -o command -p " + processId + " | sed -n 2p", execOptions);
    command = command.replace(/\n$/, "");
    if (isProcessAReactApp(command)) {
        const packageName = getPackageNameInDirectory(processDirectory);
        return packageName ? packageName : command;
    }
    else {
        return command;
    }
}
function getDirectoryOfProcessById(processId) {
    return (0, child_process_1.execSync)("lsof -p " +
        processId +
        ' | awk \'$4=="cwd" {for (i=9; i<=NF; i++) printf "%s ", $i}\'', execOptions).trim();
}
function getProcessForPort(port) {
    try {
        const processId = getProcessIdOnPort(port);
        const directory = getDirectoryOfProcessById(processId);
        const command = getProcessCommand(processId, directory);
        return (chalk_1.default.cyan(command) +
            chalk_1.default.grey(" (pid " + processId + ")\n") +
            chalk_1.default.blue("  in ") +
            chalk_1.default.cyan(directory));
    }
    catch (e) {
        return null;
    }
}
exports.default = getProcessForPort;
